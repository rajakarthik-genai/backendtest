services:
  backend:
    build:
      context: .
      dockerfile: backend_RAG.dockerfile  # custom name, keep if you have it
    image: digital-twin-backend:latest
    container_name: digital-twin-backend
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped
    working_dir: /app   # must match the Dockerfile WORKDIR if needed
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      milvus:
        condition: service_started
    networks:
      - meditwin_network         # <── renamed

  # ------------ Databases -----------------------------------------------
  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports: ["27017:27017"]
    volumes: ["mongo-data:/data/db"]
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "-u", "${MONGO_INITDB_ROOT_USERNAME}",
             "-p", "${MONGO_INITDB_ROOT_PASSWORD}", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meditwin_network         # <── renamed

  redis:
    image: redis:7.0-alpine
    container_name: redis
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes: ["redis-data:/data"]
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meditwin_network

  neo4j:
    image: neo4j:5
    container_name: neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
    ports: ["7474:7474", "7687:7687"]
    volumes: ["neo4j-data:/data"]
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD} 'RETURN 1'"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - meditwin_network

  # ---------- Milvus stack (stand-alone) -------------------------------
  etcd:
    image: bitnami/etcd:3.5.9
    container_name: etcd
    restart: unless-stopped
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    volumes: [etcd_data:/bitnami/etcd]
    healthcheck:
      test: ["CMD", "/opt/bitnami/etcd/bin/etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meditwin_network

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes: [minio_data:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meditwin_network

  milvus:
    image: bitnami/milvus:2.5.13
    container_name: milvus
    restart: unless-stopped
    command: ["run", "standalone"]   # ← CRUCIAL
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY_ID: minioadmin        # keep defaults for a local PoC
      MINIO_SECRET_ACCESS_KEY: minioadmin
    depends_on:
      - etcd
      - minio
    ports:
      - "19530:19530"
      - "9091:9091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - meditwin_network


networks:
  meditwin_network:            # <── renamed network lives here
    driver: bridge

volumes:
  mongo-data:
  redis-data:
  neo4j-data:
  etcd_data:
  minio_data:
  milvus_data:
