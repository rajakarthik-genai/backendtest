"""
Web-search helper that calls **gpt-4o-mini-search-preview** to fetch a
concise, up-to-date answer/snippet.

Rationale  ▸ avoids extra API keys (SerpAPI/Bing) by leveraging OpenAI’s
             built-in Search model. It works like a function-calling tool
             where the model performs the search internally.
"""
from __future__ import annotations
import openai
from utils.logging import logger
from config.settings import settings


def search(query: str, max_sentences: int = 3) -> str:
    """
    Return a brief, plain-text summary of *query* (≤ `max_sentences`).

    The response is generated by gpt-4o-mini-search-preview which executes
    the search and produces a grounded answer including sources.

    Parameters
    ----------
    query : str
        The search query (english text).
    max_sentences : int
        Trim the answer to this many sentences for brevity.
    """
    if not query.strip():
        return "No query provided to web_search."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini-search-preview",
            messages=[
                {
                    "role": "user",
                    "content": (
                        f"Search the web for up-to-date medical information "
                        f"and give me a concise {max_sentences}-sentence answer "
                        f"to: {query}"
                    ),
                }
            ],
            temperature=0.2,
        )
        full_text: str = response.choices[0].message.content.strip()
        # Keep only the requested number of sentences
        sentences = full_text.split(". ")
        trimmed = ". ".join(sentences[:max_sentences]).rstrip(". ") + "."
        return trimmed
    except Exception as exc:  # broad catch to avoid crashing upstream agent
        logger.error(f"web_search error: {exc}")
        return "Web search unavailable at the moment."
